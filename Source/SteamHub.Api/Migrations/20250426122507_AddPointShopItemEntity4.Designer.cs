// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SteamHub.Api.Context;

#nullable disable

namespace SteamHub.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250426122507_AddPointShopItemEntity4")]
    partial class AddPointShopItemEntity4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SteamHub.Api.Entities.PointShopItem", b =>
                {
                    b.Property<int>("ItemIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemIdentifier"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PointPrice")
                        .HasColumnType("float");

                    b.HasKey("ItemIdentifier");

                    b.ToTable("PointShopItems");

                    b.HasData(
                        new
                        {
                            ItemIdentifier = 1,
                            Description = "Description1",
                            ImagePath = "https://www.teeshood.com/cdn/shop/products/IMG_2627_1800x.png?v=1627292451",
                            IsActive = true,
                            ItemType = "Sticker",
                            Name = "Item1",
                            PointPrice = 10.0
                        },
                        new
                        {
                            ItemIdentifier = 2,
                            Description = "Description2",
                            ImagePath = "https://store.playstation.com/store/api/chihiro/00_09_000/container/US/en/19/UP1415-CUSA03724_00-AV00000000000160/image?w=320&h=320&bg_color=000000&opacity=100&_version=00_09_000",
                            IsActive = false,
                            ItemType = "Avatar",
                            Name = "Item2",
                            PointPrice = 20.0
                        },
                        new
                        {
                            ItemIdentifier = 3,
                            Description = "Description3",
                            ImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRPOga6RK9EhRyqpH7wO2HyZcjxyiryNk6vIw&s",
                            IsActive = true,
                            ItemType = "Emoji",
                            Name = "Item3",
                            PointPrice = 30.0
                        },
                        new
                        {
                            ItemIdentifier = 4,
                            Description = "Description4",
                            ImagePath = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRIaA9WSGUAWBQ2oVRwsPWoC7CrnhuYX5mMXA&s",
                            IsActive = true,
                            ItemType = "Sticker",
                            Name = "Item4",
                            PointPrice = 40.0
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.TestGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestGames");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Roblox"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Minecraft"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Metin2"
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PointsBalance")
                        .HasColumnType("real");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.Property<float>("WalletBalance")
                        .HasColumnType("real");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "user1@gmail.com",
                            PointsBalance = 100f,
                            UserName = "User1",
                            UserRole = 0,
                            WalletBalance = 56f
                        },
                        new
                        {
                            UserId = 2,
                            Email = "user2@gmail.com",
                            PointsBalance = 45f,
                            UserName = "User2",
                            UserRole = 0,
                            WalletBalance = 78f
                        },
                        new
                        {
                            UserId = 3,
                            Email = "user3@gmail.com",
                            PointsBalance = 234f,
                            UserName = "User3",
                            UserRole = 0,
                            WalletBalance = 21f
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UserInventoryItem", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ItemIdentifier")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "ItemIdentifier");

                    b.HasIndex("ItemIdentifier");

                    b.ToTable("UserInventoryItems");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ItemIdentifier = 1,
                            PurchaseDate = new DateTime(2025, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            UserId = 2,
                            ItemIdentifier = 2,
                            PurchaseDate = new DateTime(2025, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = false
                        },
                        new
                        {
                            UserId = 3,
                            ItemIdentifier = 3,
                            PurchaseDate = new DateTime(2025, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            UserId = 1,
                            ItemIdentifier = 4,
                            PurchaseDate = new DateTime(2025, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.UserInventoryItem", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.PointShopItem", "PointShopItem")
                        .WithMany("UserInventoryItems")
                        .HasForeignKey("ItemIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.User", "User")
                        .WithMany("UserInventoryItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PointShopItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.PointShopItem", b =>
                {
                    b.Navigation("UserInventoryItems");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.User", b =>
                {
                    b.Navigation("UserInventoryItems");
                });
#pragma warning restore 612, 618
        }
    }
}
