// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SteamHub.Api.Context;

#nullable disable

namespace SteamHub.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250425170837_GameTagUserEntites")]
    partial class GameTagUserEntites
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameTag", b =>
                {
                    b.Property<int>("GameIdentifier")
                        .HasColumnType("int");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("int");

                    b.HasKey("GameIdentifier", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("GameTag");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Game", b =>
                {
                    b.Property<int>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Identifier"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GameplayPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinimumRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PublisherIdentifier")
                        .HasColumnType("int");

                    b.Property<string>("RecommendedRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TagScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TrailerPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Identifier");

                    b.HasIndex("PublisherIdentifier");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Tag_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            Tag_name = "Tag1"
                        },
                        new
                        {
                            TagId = 2,
                            Tag_name = "Rogue-Like"
                        },
                        new
                        {
                            TagId = 3,
                            Tag_name = "Third-Person Shooter"
                        },
                        new
                        {
                            TagId = 4,
                            Tag_name = "Multiplayer"
                        },
                        new
                        {
                            TagId = 5,
                            Tag_name = "Horror"
                        },
                        new
                        {
                            TagId = 6,
                            Tag_name = "First-Person Shooter"
                        },
                        new
                        {
                            TagId = 7,
                            Tag_name = "Action"
                        },
                        new
                        {
                            TagId = 8,
                            Tag_name = "Platformer"
                        },
                        new
                        {
                            TagId = 9,
                            Tag_name = "Adventure"
                        },
                        new
                        {
                            TagId = 10,
                            Tag_name = "Puzzle"
                        },
                        new
                        {
                            TagId = 11,
                            Tag_name = "Exploration"
                        },
                        new
                        {
                            TagId = 12,
                            Tag_name = "Sandbox"
                        },
                        new
                        {
                            TagId = 13,
                            Tag_name = "Survival"
                        },
                        new
                        {
                            TagId = 14,
                            Tag_name = "Arcade"
                        },
                        new
                        {
                            TagId = 15,
                            Tag_name = "RPG"
                        },
                        new
                        {
                            TagId = 16,
                            Tag_name = "Racing"
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PointsBalance")
                        .HasColumnType("real");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.Property<float>("WalletBalance")
                        .HasColumnType("real");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "roblox@gmail.com",
                            PointsBalance = 22f,
                            UserName = "Roblox",
                            UserRole = 1,
                            WalletBalance = 11f
                        },
                        new
                        {
                            UserId = 2,
                            Email = "john_doe@example.com",
                            PointsBalance = 500f,
                            UserName = "john_doe",
                            UserRole = 0,
                            WalletBalance = 100f
                        },
                        new
                        {
                            UserId = 3,
                            Email = "jane_smith@example.com",
                            PointsBalance = 300f,
                            UserName = "jane_smith",
                            UserRole = 1,
                            WalletBalance = 150f
                        },
                        new
                        {
                            UserId = 4,
                            Email = "alex_brown@example.com",
                            PointsBalance = 150f,
                            UserName = "alex_brown",
                            UserRole = 0,
                            WalletBalance = 50f
                        },
                        new
                        {
                            UserId = 5,
                            Email = "behaviour@example.com",
                            PointsBalance = 1000f,
                            UserName = "Behaviour Interactive",
                            UserRole = 1,
                            WalletBalance = 200f
                        },
                        new
                        {
                            UserId = 6,
                            Email = "valve@example.com",
                            PointsBalance = 300f,
                            UserName = "Valve Corporation",
                            UserRole = 1,
                            WalletBalance = 150f
                        },
                        new
                        {
                            UserId = 7,
                            Email = "nintendo@example.com",
                            PointsBalance = 800f,
                            UserName = "Nintendo",
                            UserRole = 1,
                            WalletBalance = 250f
                        },
                        new
                        {
                            UserId = 8,
                            Email = "hempuli@example.com",
                            PointsBalance = 500f,
                            UserName = "Hempuli Oy",
                            UserRole = 1,
                            WalletBalance = 100f
                        },
                        new
                        {
                            UserId = 9,
                            Email = "mobius@example.com",
                            PointsBalance = 600f,
                            UserName = "Mobius Digital",
                            UserRole = 1,
                            WalletBalance = 120f
                        },
                        new
                        {
                            UserId = 10,
                            Email = "mojang@example.com",
                            PointsBalance = 900f,
                            UserName = "Mojang Studios",
                            UserRole = 1,
                            WalletBalance = 300f
                        },
                        new
                        {
                            UserId = 11,
                            Email = "unknownworlds@example.com",
                            PointsBalance = 700f,
                            UserName = "Unknown Worlds Entertainment",
                            UserRole = 1,
                            WalletBalance = 180f
                        },
                        new
                        {
                            UserId = 12,
                            Email = "mary_jones@example.com",
                            PointsBalance = 1000f,
                            UserName = "mary_jones",
                            UserRole = 1,
                            WalletBalance = 200f
                        });
                });

            modelBuilder.Entity("GameTag", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GameIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Game", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("PublisherIdentifier")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
