// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SteamHub.Api.Context;

#nullable disable

namespace SteamHub.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250427091255_AddGameEntity")]
    partial class AddGameEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameTag", b =>
                {
                    b.Property<int>("GamesGameId")
                        .HasColumnType("int");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("int");

                    b.HasKey("GamesGameId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("GameTag");

                    b.HasData(
                        new
                        {
                            GamesGameId = 1,
                            TagsTagId = 1
                        },
                        new
                        {
                            GamesGameId = 1,
                            TagsTagId = 2
                        },
                        new
                        {
                            GamesGameId = 1,
                            TagsTagId = 3
                        },
                        new
                        {
                            GamesGameId = 2,
                            TagsTagId = 4
                        },
                        new
                        {
                            GamesGameId = 2,
                            TagsTagId = 5
                        },
                        new
                        {
                            GamesGameId = 2,
                            TagsTagId = 6
                        },
                        new
                        {
                            GamesGameId = 3,
                            TagsTagId = 7
                        },
                        new
                        {
                            GamesGameId = 3,
                            TagsTagId = 8
                        },
                        new
                        {
                            GamesGameId = 3,
                            TagsTagId = 9
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("GameplayPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinimumRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfRecentPurchases")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PublisherUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RecommendedRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TrailerPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameId");

                    b.HasIndex("PublisherUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            Description = "An epic open-world RPG set in a mystical realm full of adventure, magic, and danger.",
                            Discount = 0.15m,
                            GameplayPath = "https://www.youtube.com/watch?v=AKXiKBnzpBQ",
                            ImagePath = "https://upload.wikimedia.org/wikipedia/en/5/5e/Elden_Ring_Box_art.jpg",
                            MinimumRequirements = "Intel i5-8400, 8GB RAM, GTX 1060",
                            Name = "Legends of Etheria",
                            NumberOfRecentPurchases = 1200,
                            Price = 49.99m,
                            PublisherUserId = 3,
                            Rating = 4.7m,
                            RecommendedRequirements = "Intel i7-8700K, 16GB RAM, RTX 2070",
                            RejectMessage = "rejected game",
                            StatusId = 2,
                            TrailerPath = "https://www.youtube.com/watch?v=E3Huy2cdih0"
                        },
                        new
                        {
                            GameId = 2,
                            Description = "A futuristic open-world RPG where you explore the neon-lit streets of Nightcity.",
                            Discount = 0.25m,
                            GameplayPath = "https://www.youtube.com/watch?v=8X2kIfS6fb8",
                            ImagePath = "https://upload.wikimedia.org/wikipedia/en/9/9f/Cyberpunk_2077_box_art.jpg",
                            MinimumRequirements = "Intel i5-3570K, 8GB RAM, GTX 780",
                            Name = "Cyberstrike 2077",
                            NumberOfRecentPurchases = 950,
                            Price = 59.99m,
                            PublisherUserId = 4,
                            Rating = 4.2m,
                            RecommendedRequirements = "Intel i7-4790, 12GB RAM, GTX 1060",
                            StatusId = 1,
                            TrailerPath = "https://www.youtube.com/watch?v=FknHjl7eQ6o"
                        },
                        new
                        {
                            GameId = 3,
                            Description = "Immerse yourself in the Viking age in this brutal and breathtaking action RPG.",
                            Discount = 0.10m,
                            GameplayPath = "https://www.youtube.com/watch?v=gncB1_e9n8E",
                            ImagePath = "https://upload.wikimedia.org/wikipedia/en/6/6d/Assassin%27s_Creed_Valhalla_cover.jpg",
                            MinimumRequirements = "Intel i5-4460, 8GB RAM, GTX 960",
                            Name = "Shadow of Valhalla",
                            NumberOfRecentPurchases = 780,
                            Price = 44.99m,
                            PublisherUserId = 3,
                            Rating = 4.5m,
                            RecommendedRequirements = "Intel i7-6700K, 16GB RAM, GTX 1080",
                            StatusId = 1,
                            TrailerPath = "https://www.youtube.com/watch?v=ssrNcwxALS4"
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.GameStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GameStatus");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Rejected"
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "User"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Developer"
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            TagName = "Tag1"
                        },
                        new
                        {
                            TagId = 2,
                            TagName = "Rogue-Like"
                        },
                        new
                        {
                            TagId = 3,
                            TagName = "Third-Person Shooter"
                        },
                        new
                        {
                            TagId = 4,
                            TagName = "Multiplayer"
                        },
                        new
                        {
                            TagId = 5,
                            TagName = "Horror"
                        },
                        new
                        {
                            TagId = 6,
                            TagName = "First-Person Shooter"
                        },
                        new
                        {
                            TagId = 7,
                            TagName = "Action"
                        },
                        new
                        {
                            TagId = 8,
                            TagName = "Platformer"
                        },
                        new
                        {
                            TagId = 9,
                            TagName = "Adventure"
                        },
                        new
                        {
                            TagId = 10,
                            TagName = "Puzzle"
                        },
                        new
                        {
                            TagId = 11,
                            TagName = "Exploration"
                        },
                        new
                        {
                            TagId = 12,
                            TagName = "Sandbox"
                        },
                        new
                        {
                            TagId = 13,
                            TagName = "Survival"
                        },
                        new
                        {
                            TagId = 14,
                            TagName = "Arcade"
                        },
                        new
                        {
                            TagId = 15,
                            TagName = "RPG"
                        },
                        new
                        {
                            TagId = 16,
                            TagName = "Racing"
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PointsBalance")
                        .HasColumnType("real");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("WalletBalance")
                        .HasColumnType("real");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "user1@gmail.com",
                            PointsBalance = 100f,
                            RoleId = 0,
                            UserName = "User1",
                            WalletBalance = 56f
                        },
                        new
                        {
                            UserId = 2,
                            Email = "user2@gmail.com",
                            PointsBalance = 45f,
                            RoleId = 0,
                            UserName = "User2",
                            WalletBalance = 78f
                        },
                        new
                        {
                            UserId = 3,
                            Email = "user3@gmail.com",
                            PointsBalance = 234f,
                            RoleId = 1,
                            UserName = "User3",
                            WalletBalance = 21f
                        },
                        new
                        {
                            UserId = 4,
                            Email = "user4@gmail.com",
                            PointsBalance = 34f,
                            RoleId = 1,
                            UserName = "User4",
                            WalletBalance = 455f
                        });
                });

            modelBuilder.Entity("GameTag", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Game", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.User", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SteamHub.Api.Entities.GameStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SteamHub.Api.Entities.User", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Role", "UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });
#pragma warning restore 612, 618
        }
    }
}
