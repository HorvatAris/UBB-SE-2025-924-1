// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SteamHub.Api.Context;

#nullable disable

namespace SteamHub.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
    #pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SteamHub.Api.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "User"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Developer"
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            TagName = "Tag1"
                        },
                        new
                        {
                            TagId = 2,
                            TagName = "Rogue-Like"
                        },
                        new
                        {
                            TagId = 3,
                            TagName = "Third-Person Shooter"
                        },
                        new
                        {
                            TagId = 4,
                            TagName = "Multiplayer"
                        },
                        new
                        {
                            TagId = 5,
                            TagName = "Horror"
                        },
                        new
                        {
                            TagId = 6,
                            TagName = "First-Person Shooter"
                        },
                        new
                        {
                            TagId = 7,
                            TagName = "Action"
                        },
                        new
                        {
                            TagId = 8,
                            TagName = "Platformer"
                        },
                        new
                        {
                            TagId = 9,
                            TagName = "Adventure"
                        },
                        new
                        {
                            TagId = 10,
                            TagName = "Puzzle"
                        },
                        new
                        {
                            TagId = 11,
                            TagName = "Exploration"
                        },
                        new
                        {
                            TagId = 12,
                            TagName = "Sandbox"
                        },
                        new
                        {
                            TagId = 13,
                            TagName = "Survival"
                        },
                        new
                        {
                            TagId = 14,
                            TagName = "Arcade"
                        },
                        new
                        {
                            TagId = 15,
                            TagName = "RPG"
                        },
                        new
                        {
                            TagId = 16,
                            TagName = "Racing"
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PointsBalance")
                        .HasColumnType("real");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("WalletBalance")
                        .HasColumnType("real");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "user1@gmail.com",
                            PointsBalance = 100f,
                            RoleId = 0,
                            UserName = "User1",
                            WalletBalance = 56f
                        },
                        new
                        {
                            UserId = 2,
                            Email = "user2@gmail.com",
                            PointsBalance = 45f,
                            RoleId = 0,
                            UserName = "User2",
                            WalletBalance = 78f
                        },
                        new
                        {
                            UserId = 3,
                            Email = "user3@gmail.com",
                            PointsBalance = 234f,
                            RoleId = 1,
                            UserName = "User3",
                            WalletBalance = 21f
                        },
                        new
                        {
                            UserId = 4,
                            Email = "user4@gmail.com",
                            PointsBalance = 34f,
                            RoleId = 1,
                            UserName = "User4",
                            WalletBalance = 455f
                        });
                });

            modelBuilder.Entity("SteamHub.Api.Entities.User", b =>
                {
                    b.HasOne("SteamHub.Api.Entities.Role", "UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });
#pragma warning restore 612, 618
        }
    }
}
